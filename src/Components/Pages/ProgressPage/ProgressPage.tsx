import React, { useReducer } from 'react';
import { ProgressPageProps, Project } from '../../../interfaces/interface';
import Stack from '../../Stack/Stack';

import { Navigation, Pagination, Mousewheel, Keyboard } from 'swiper';
import { Swiper, SwiperSlide } from 'swiper/react';
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

import './ProgressPage.scss';
import './Swiper.scss';

const projects: Project[] = [
    {
        name: 'Carcar√°',
        img: require('../../../imgs/projects/carcara.jpg'),
        stacks: ['Rust'],
        description: 'Carcar√° is a proof checker and elaborator for SMT proofs in the Alethe format.',
        url: 'https://github.com/ufmg-smite/carcara',
    },
    {
        name: 'CVC5',
        img: require('../../../imgs/projects/cvc5.png'),
        stacks: ['C++', 'Wasm'],
        description:
            'CVC5 is a tool for determining the satisfiability of a first order formula modulo a first order theory (or a combination of such theories).',
        url: 'https://github.com/cvc5/cvc5',
    },
    {
        name: 'Proof Visualizer',
        img: require('../../../imgs/projects/proof-visualizer.png'),
        stacks: ['C++', 'React', 'Type Script', 'Wasm'],
        description:
            'Web visualizer for proof certificates generated by CVC5, a SMT solver. This website provides customizable views through graphs and tables allowing better understanding of certificates and the operation of SMT solvers.',
        url: 'https://github.com/vinciusb/proof-visualizer',
    },
    {
        name: 'Classification using computational geometry',
        img: require('../../../imgs/projects/geometry.png'),
        stacks: ['Python'],
        description:
            'A study case of computational geometry where the classification problem is implemented in a different way.',
        url: 'https://github.com/vinciusb/TP1-A2',
    },
    {
        name: 'Weather App',
        img: require('../../../imgs/projects/weather.jpg'),
        stacks: ['React', 'Type Script'],
        description: 'A desktop and web weather app using an open weather API for custom climate info.',
        url: 'https://github.com/vinciusb/weather-app',
    },
];

const stacksInfos: { [s: string]: { img: string; level: number } } = {
    'C++': {
        img: require('../../../imgs/stacks/c++.png'),
        level: 3,
    },
    React: {
        img: require('../../../imgs/stacks/react.png'),
        level: 3,
    },
    Rust: {
        img: require('../../../imgs/stacks/rust.png'),
        level: 2,
    },
    'Type Script': {
        img: require('../../../imgs/stacks/typescript.png'),
        level: 3,
    },
    Wasm: {
        img: require('../../../imgs/stacks/wasm.png'),
        level: 1,
    },
    Python: {
        img: require('../../../imgs/stacks/python.png'),
        level: 2,
    },
};

const N_PROJECTS = projects.length;

const ProgressPage: React.FC<ProgressPageProps> = ({ className }: ProgressPageProps) => {
    const renderProject = (i: number): JSX.Element => {
        const curProj = projects[i];
        return (
            <SwiperSlide>
                <div className="main-frame">
                    <img src={curProj.img} alt={curProj.name} />
                    <div className="infos">
                        <div>
                            <h3>{curProj.name}</h3>
                            <p>{curProj.description}</p>
                        </div>
                        <a href={curProj.url} target="_blank" rel="noreferrer">
                            <div className="check-bt">
                                <span>Check</span>
                                <span>ü°≤</span>
                            </div>
                        </a>
                        <div className="stacks">
                            {curProj.stacks.map((s, id) => (
                                <Stack key={id} level={stacksInfos[s].level}>
                                    <img src={stacksInfos[s].img} alt={s} />
                                </Stack>
                            ))}
                        </div>
                    </div>
                </div>
            </SwiperSlide>
        );
    };

    return (
        <div className={'progress-page ' + className}>
            <h1>Portfolio</h1>
            <Swiper
                cssMode={true}
                navigation={true}
                pagination={true}
                mousewheel={true}
                loop={true}
                keyboard={true}
                modules={[Navigation, Pagination, Mousewheel, Keyboard]}
                className="mySwiper portfolio secao"
            >
                {Array.from(Array(N_PROJECTS), (_, id) => renderProject(id))}
            </Swiper>
        </div>
    );
};

export default ProgressPage;
